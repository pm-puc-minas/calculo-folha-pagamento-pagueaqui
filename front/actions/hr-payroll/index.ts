/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * HR Payroll API
 * API para sistema de folha de pagamento
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { api } from '../../app/lib/axios-orval';
export interface FuncionarioModel {
  id?: number;
  nome: string;
  sobrenome: string;
  /**
   * CPF deve conter 11 dígitos numéricos
   * @pattern \d{11}
   */
  cpf: string;
  rg: string;
  email: string;
  endereco: string;
  dataNascimento?: string;
  pis?: number;
  dataDeAdmissao?: string;
  cargo?: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
   */
  senha: string;
}

export interface CompanyModel {
  id?: number;
  /**
   * CNPJ no formato XX.XXX.XXX/XXXX-XX
   * @pattern \d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}
   */
  cnpj: string;
  razaoSocial: string;
  nomeFantasia?: string;
  inscricaoEstadual?: string;
}

export interface CompanyPatchDTO {
  cnpj?: string;
  razaoSocial?: string;
}

export interface FolhaPagamentoModel {
  id?: number;
  companyId?: number;
  dataInicio?: string;
  dataFim?: string;
  salarioBase?: number;
}

export interface DescontosModel {
  id?: number;
  nome?: string;
  tipo?: string;
  valor?: number;
  ativo?: boolean;
}

export interface PublicRegisterAccountDto {
  nome: string;
  sobrenome: string;
  email: string;
  /** @minLength 8 */
  password: string;
  /** @pattern \d{11} */
  cpf: string;
  rg?: string;
  endereco?: string;
}

export interface PublicLoginAccountDto {
  email: string;
  password: string;
}

export interface PublicForgetPasswordDto {
  email: string;
}

export interface PublicSendVerificationCodeDto {
  email: string;
}

export interface PublicVerifyEmailDto {
  email: string;
  verificationCode: string;
}

export interface PublicAuthControllerRegister201 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerLogin200 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerForgotPassword200 {
  message?: string;
}

export interface PublicAuthControllerSendVerificationCode200 {
  message?: string;
}

export interface PublicAuthControllerVerify200 {
  message?: string;
}

export interface BadRequestGenericResponseDto {
  message?: string;
  error?: string;
}

export interface UnauthorizedGenericResponseDto {
  message?: string;
  error?: string;
}

export interface ForbiddenGenericResponseDto {
  message?: string;
  error?: string;
}

export interface NotFoundGenericResponseDto {
  message?: string;
  error?: string;
}

export interface EmployeeChangePasswordDto {
  /** Token de autenticação */
  token: string;
  /** Nova senha */
  newPassword: string;
  /** Confirmação da nova senha */
  confirmPassword: string;
}

export interface EmployeeAuthControllerRegister200 {
  message?: string;
  success?: boolean;
}

export interface EmployeeAuthControllerListUsers200 {
  users?: UserSummaryDto[];
  totalUsers?: number;
}

export interface UserSummaryDto {
  id?: number;
  nome?: string;
  sobrenome?: string;
  email?: string;
  cargo?: string;
}

export type GerarNovaFolhaParams = {
dataInicio: string;
dataFim: string;
salarioBase: number;
};

/**
 * @summary Register new account
 */
export const publicAuthControllerRegister = (
    publicRegisterAccountDto: PublicRegisterAccountDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerRegister201>(
      {url: `/api/public/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicRegisterAccountDto, signal
    },
      );
    }
  


export const getPublicAuthControllerRegisterMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext> => {

const mutationKey = ['publicAuthControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerRegister>>, {data: PublicRegisterAccountDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerRegister>>>
    export type PublicAuthControllerRegisterMutationBody = PublicRegisterAccountDto
    export type PublicAuthControllerRegisterMutationError = BadRequestGenericResponseDto

    /**
 * @summary Register new account
 */
export const usePublicAuthControllerRegister = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerRegister>>,
        TError,
        {data: PublicRegisterAccountDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Login to account
 */
export const publicAuthControllerLogin = (
    publicLoginAccountDto: PublicLoginAccountDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerLogin200>(
      {url: `/api/public/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicLoginAccountDto, signal
    },
      );
    }
  


export const getPublicAuthControllerLoginMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext> => {

const mutationKey = ['publicAuthControllerLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerLogin>>, {data: PublicLoginAccountDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerLogin>>>
    export type PublicAuthControllerLoginMutationBody = PublicLoginAccountDto
    export type PublicAuthControllerLoginMutationError = BadRequestGenericResponseDto

    /**
 * @summary Login to account
 */
export const usePublicAuthControllerLogin = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerLogin>>,
        TError,
        {data: PublicLoginAccountDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Request password reset
 */
export const publicAuthControllerForgotPassword = (
    publicForgetPasswordDto: PublicForgetPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerForgotPassword200>(
      {url: `/api/public/auth/forget-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicForgetPasswordDto, signal
    },
      );
    }
  


export const getPublicAuthControllerForgotPasswordMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext> => {

const mutationKey = ['publicAuthControllerForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, {data: PublicForgetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>>
    export type PublicAuthControllerForgotPasswordMutationBody = PublicForgetPasswordDto
    export type PublicAuthControllerForgotPasswordMutationError = BadRequestGenericResponseDto

    /**
 * @summary Request password reset
 */
export const usePublicAuthControllerForgotPassword = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>,
        TError,
        {data: PublicForgetPasswordDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Send verification code
 */
export const publicAuthControllerSendVerificationCode = (
    publicSendVerificationCodeDto: PublicSendVerificationCodeDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerSendVerificationCode200>(
      {url: `/api/public/auth/send-verification-code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicSendVerificationCodeDto, signal
    },
      );
    }
  


export const getPublicAuthControllerSendVerificationCodeMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext> => {

const mutationKey = ['publicAuthControllerSendVerificationCode'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, {data: PublicSendVerificationCodeDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerSendVerificationCode(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerSendVerificationCodeMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>>
    export type PublicAuthControllerSendVerificationCodeMutationBody = PublicSendVerificationCodeDto
    export type PublicAuthControllerSendVerificationCodeMutationError = BadRequestGenericResponseDto

    /**
 * @summary Send verification code
 */
export const usePublicAuthControllerSendVerificationCode = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>,
        TError,
        {data: PublicSendVerificationCodeDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerSendVerificationCodeMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Verify email
 */
export const publicAuthControllerVerify = (
    publicVerifyEmailDto: PublicVerifyEmailDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerVerify200>(
      {url: `/api/public/auth/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicVerifyEmailDto, signal
    },
      );
    }
  


export const getPublicAuthControllerVerifyMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext> => {

const mutationKey = ['publicAuthControllerVerify'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerVerify>>, {data: PublicVerifyEmailDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerVerify(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerVerifyMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerVerify>>>
    export type PublicAuthControllerVerifyMutationBody = PublicVerifyEmailDto
    export type PublicAuthControllerVerifyMutationError = BadRequestGenericResponseDto

    /**
 * @summary Verify email
 */
export const usePublicAuthControllerVerify = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerVerify>>,
        TError,
        {data: PublicVerifyEmailDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerVerifyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Create a new user
 */
export const createUser = (
    funcionarioModel: FuncionarioModel,
 signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/users/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: funcionarioModel, signal
    },
      );
    }
  


export const getCreateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: FuncionarioModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: FuncionarioModel}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: FuncionarioModel}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = FuncionarioModel
    export type CreateUserMutationError = unknown

    /**
 * @summary Create a new user
 */
export const useCreateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: FuncionarioModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: FuncionarioModel},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get user by ID
 */
export const getUser = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return api<FuncionarioModel>(
      {url: `/users/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetUserQueryKey = (id?: number,) => {
    return [
    `/users/${id}`
    ] as const;
    }

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = unknown


export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user by ID
 */

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all users
 */
export const listUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return api<FuncionarioModel[]>(
      {url: `/users`, method: 'GET', signal
    },
      );
    }
  



export const getListUsersQueryKey = () => {
    return [
    `/users`
    ] as const;
    }

    
export const getListUsersQueryOptions = <TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({ signal }) => listUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof listUsers>>>
export type ListUsersQueryError = unknown


export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all users
 */

export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListUsersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new company
 */
export const createCompany = (
    companyModel: CompanyModel,
 signal?: AbortSignal
) => {
      
      
      return api<void>(
      {url: `/companies/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyModel, signal
    },
      );
    }
  


export const getCreateCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: CompanyModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: CompanyModel}, TContext> => {

const mutationKey = ['createCompany'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCompany>>, {data: CompanyModel}> = (props) => {
          const {data} = props ?? {};

          return  createCompany(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof createCompany>>>
    export type CreateCompanyMutationBody = CompanyModel
    export type CreateCompanyMutationError = unknown

    /**
 * @summary Create a new company
 */
export const useCreateCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCompany>>, TError,{data: CompanyModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCompany>>,
        TError,
        {data: CompanyModel},
        TContext
      > => {

      const mutationOptions = getCreateCompanyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get company by ID
 */
export const getCompany = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return api<CompanyModel>(
      {url: `/companies/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetCompanyQueryKey = (id?: number,) => {
    return [
    `/companies/${id}`
    ] as const;
    }

    
export const getGetCompanyQueryOptions = <TData = Awaited<ReturnType<typeof getCompany>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompany>>> = ({ signal }) => getCompany(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof getCompany>>>
export type GetCompanyQueryError = unknown


export function useGetCompany<TData = Awaited<ReturnType<typeof getCompany>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompany>>,
          TError,
          Awaited<ReturnType<typeof getCompany>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompany<TData = Awaited<ReturnType<typeof getCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompany>>,
          TError,
          Awaited<ReturnType<typeof getCompany>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCompany<TData = Awaited<ReturnType<typeof getCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get company by ID
 */

export function useGetCompany<TData = Awaited<ReturnType<typeof getCompany>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCompanyQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List all companies
 */
export const listCompanies = (
    
 signal?: AbortSignal
) => {
      
      
      return api<CompanyModel[]>(
      {url: `/companies/list`, method: 'GET', signal
    },
      );
    }
  



export const getListCompaniesQueryKey = () => {
    return [
    `/companies/list`
    ] as const;
    }

    
export const getListCompaniesQueryOptions = <TData = Awaited<ReturnType<typeof listCompanies>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListCompaniesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listCompanies>>> = ({ signal }) => listCompanies(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListCompaniesQueryResult = NonNullable<Awaited<ReturnType<typeof listCompanies>>>
export type ListCompaniesQueryError = unknown


export function useListCompanies<TData = Awaited<ReturnType<typeof listCompanies>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompanies>>,
          TError,
          Awaited<ReturnType<typeof listCompanies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCompanies<TData = Awaited<ReturnType<typeof listCompanies>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompanies>>,
          TError,
          Awaited<ReturnType<typeof listCompanies>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListCompanies<TData = Awaited<ReturnType<typeof listCompanies>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all companies
 */

export function useListCompanies<TData = Awaited<ReturnType<typeof listCompanies>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListCompaniesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update company
 */
export const patchCompany = (
    id: number,
    companyPatchDTO: CompanyPatchDTO,
 ) => {
      
      
      return api<void>(
      {url: `/companies/update/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: companyPatchDTO
    },
      );
    }
  


export const getPatchCompanyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchCompany>>, TError,{id: number;data: CompanyPatchDTO}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchCompany>>, TError,{id: number;data: CompanyPatchDTO}, TContext> => {

const mutationKey = ['patchCompany'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchCompany>>, {id: number;data: CompanyPatchDTO}> = (props) => {
          const {id,data} = props ?? {};

          return  patchCompany(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof patchCompany>>>
    export type PatchCompanyMutationBody = CompanyPatchDTO
    export type PatchCompanyMutationError = unknown

    /**
 * @summary Update company
 */
export const usePatchCompany = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchCompany>>, TError,{id: number;data: CompanyPatchDTO}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchCompany>>,
        TError,
        {id: number;data: CompanyPatchDTO},
        TContext
      > => {

      const mutationOptions = getPatchCompanyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary List all payroll sheets
 */
export const listarTodas = (
    
 signal?: AbortSignal
) => {
      
      
      return api<FolhaPagamentoModel[]>(
      {url: `/folhas`, method: 'GET', signal
    },
      );
    }
  



export const getListarTodasQueryKey = () => {
    return [
    `/folhas`
    ] as const;
    }

    
export const getListarTodasQueryOptions = <TData = Awaited<ReturnType<typeof listarTodas>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarTodasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarTodas>>> = ({ signal }) => listarTodas(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarTodasQueryResult = NonNullable<Awaited<ReturnType<typeof listarTodas>>>
export type ListarTodasQueryError = unknown


export function useListarTodas<TData = Awaited<ReturnType<typeof listarTodas>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodas>>,
          TError,
          Awaited<ReturnType<typeof listarTodas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarTodas<TData = Awaited<ReturnType<typeof listarTodas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodas>>,
          TError,
          Awaited<ReturnType<typeof listarTodas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarTodas<TData = Awaited<ReturnType<typeof listarTodas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all payroll sheets
 */

export function useListarTodas<TData = Awaited<ReturnType<typeof listarTodas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarTodasQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get discount by ID
 */
export const buscarPorId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return api<DescontosModel>(
      {url: `/api/descontos/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getBuscarPorIdQueryKey = (id?: number,) => {
    return [
    `/api/descontos/${id}`
    ] as const;
    }

    
export const getBuscarPorIdQueryOptions = <TData = Awaited<ReturnType<typeof buscarPorId>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarPorIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarPorId>>> = ({ signal }) => buscarPorId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarPorIdQueryResult = NonNullable<Awaited<ReturnType<typeof buscarPorId>>>
export type BuscarPorIdQueryError = void


export function useBuscarPorId<TData = Awaited<ReturnType<typeof buscarPorId>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarPorId<TData = Awaited<ReturnType<typeof buscarPorId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarPorId<TData = Awaited<ReturnType<typeof buscarPorId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get discount by ID
 */

export function useBuscarPorId<TData = Awaited<ReturnType<typeof buscarPorId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarPorIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create discount
 */
export const criar = (
    descontosModel: DescontosModel,
 signal?: AbortSignal
) => {
      
      
      return api<DescontosModel>(
      {url: `/api/descontos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: descontosModel, signal
    },
      );
    }
  


export const getCriarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criar>>, TError,{data: DescontosModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof criar>>, TError,{data: DescontosModel}, TContext> => {

const mutationKey = ['criar'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criar>>, {data: DescontosModel}> = (props) => {
          const {data} = props ?? {};

          return  criar(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarMutationResult = NonNullable<Awaited<ReturnType<typeof criar>>>
    export type CriarMutationBody = DescontosModel
    export type CriarMutationError = unknown

    /**
 * @summary Create discount
 */
export const useCriar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criar>>, TError,{data: DescontosModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criar>>,
        TError,
        {data: DescontosModel},
        TContext
      > => {

      const mutationOptions = getCriarMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Get payroll sheets by company
 */
export const buscarPorEmpresa = (
    companyId: number,
 signal?: AbortSignal
) => {
      
      
      return api<FolhaPagamentoModel[]>(
      {url: `/folhas/empresa/${companyId}`, method: 'GET', signal
    },
      );
    }
  



export const getBuscarPorEmpresaQueryKey = (companyId?: number,) => {
    return [
    `/folhas/empresa/${companyId}`
    ] as const;
    }

    
export const getBuscarPorEmpresaQueryOptions = <TData = Awaited<ReturnType<typeof buscarPorEmpresa>>, TError = unknown>(companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarPorEmpresaQueryKey(companyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarPorEmpresa>>> = ({ signal }) => buscarPorEmpresa(companyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(companyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarPorEmpresaQueryResult = NonNullable<Awaited<ReturnType<typeof buscarPorEmpresa>>>
export type BuscarPorEmpresaQueryError = unknown


export function useBuscarPorEmpresa<TData = Awaited<ReturnType<typeof buscarPorEmpresa>>, TError = unknown>(
 companyId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorEmpresa>>,
          TError,
          Awaited<ReturnType<typeof buscarPorEmpresa>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarPorEmpresa<TData = Awaited<ReturnType<typeof buscarPorEmpresa>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorEmpresa>>,
          TError,
          Awaited<ReturnType<typeof buscarPorEmpresa>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarPorEmpresa<TData = Awaited<ReturnType<typeof buscarPorEmpresa>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get payroll sheets by company
 */

export function useBuscarPorEmpresa<TData = Awaited<ReturnType<typeof buscarPorEmpresa>>, TError = unknown>(
 companyId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarPorEmpresa>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarPorEmpresaQueryOptions(companyId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Generate new payroll sheet
 */
export const gerarNovaFolha = (
    companyId: number,
    params: GerarNovaFolhaParams,
 signal?: AbortSignal
) => {
      
      
      return api<FolhaPagamentoModel>(
      {url: `/folhas/gerar/${companyId}`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getGerarNovaFolhaMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gerarNovaFolha>>, TError,{companyId: number;params: GerarNovaFolhaParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof gerarNovaFolha>>, TError,{companyId: number;params: GerarNovaFolhaParams}, TContext> => {

const mutationKey = ['gerarNovaFolha'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gerarNovaFolha>>, {companyId: number;params: GerarNovaFolhaParams}> = (props) => {
          const {companyId,params} = props ?? {};

          return  gerarNovaFolha(companyId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GerarNovaFolhaMutationResult = NonNullable<Awaited<ReturnType<typeof gerarNovaFolha>>>
    
    export type GerarNovaFolhaMutationError = unknown

    /**
 * @summary Generate new payroll sheet
 */
export const useGerarNovaFolha = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gerarNovaFolha>>, TError,{companyId: number;params: GerarNovaFolhaParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof gerarNovaFolha>>,
        TError,
        {companyId: number;params: GerarNovaFolhaParams},
        TContext
      > => {

      const mutationOptions = getGerarNovaFolhaMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary List all discounts
 */
export const listarTodos = (
    
 signal?: AbortSignal
) => {
      
      
      return api<DescontosModel[]>(
      {url: `/api/descontos`, method: 'GET', signal
    },
      );
    }
  



export const getListarTodosQueryKey = () => {
    return [
    `/api/descontos`
    ] as const;
    }

    
export const getListarTodosQueryOptions = <TData = Awaited<ReturnType<typeof listarTodos>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarTodosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarTodos>>> = ({ signal }) => listarTodos(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarTodosQueryResult = NonNullable<Awaited<ReturnType<typeof listarTodos>>>
export type ListarTodosQueryError = unknown


export function useListarTodos<TData = Awaited<ReturnType<typeof listarTodos>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodos>>,
          TError,
          Awaited<ReturnType<typeof listarTodos>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarTodos<TData = Awaited<ReturnType<typeof listarTodos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodos>>,
          TError,
          Awaited<ReturnType<typeof listarTodos>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarTodos<TData = Awaited<ReturnType<typeof listarTodos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all discounts
 */

export function useListarTodos<TData = Awaited<ReturnType<typeof listarTodos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarTodosQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary List active discounts
 */
export const listarAtivos = (
    
 signal?: AbortSignal
) => {
      
      
      return api<DescontosModel[]>(
      {url: `/api/descontos/ativos`, method: 'GET', signal
    },
      );
    }
  



export const getListarAtivosQueryKey = () => {
    return [
    `/api/descontos/ativos`
    ] as const;
    }

    
export const getListarAtivosQueryOptions = <TData = Awaited<ReturnType<typeof listarAtivos>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarAtivosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarAtivos>>> = ({ signal }) => listarAtivos(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarAtivosQueryResult = NonNullable<Awaited<ReturnType<typeof listarAtivos>>>
export type ListarAtivosQueryError = unknown


export function useListarAtivos<TData = Awaited<ReturnType<typeof listarAtivos>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarAtivos>>,
          TError,
          Awaited<ReturnType<typeof listarAtivos>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarAtivos<TData = Awaited<ReturnType<typeof listarAtivos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarAtivos>>,
          TError,
          Awaited<ReturnType<typeof listarAtivos>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarAtivos<TData = Awaited<ReturnType<typeof listarAtivos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List active discounts
 */

export function useListarAtivos<TData = Awaited<ReturnType<typeof listarAtivos>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarAtivosQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update discount
 */
export const atualizar = (
    id: number,
    descontosModel: DescontosModel,
 ) => {
      
      
      return api<DescontosModel>(
      {url: `/api/descontos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: descontosModel
    },
      );
    }
  


export const getAtualizarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizar>>, TError,{id: number;data: DescontosModel}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof atualizar>>, TError,{id: number;data: DescontosModel}, TContext> => {

const mutationKey = ['atualizar'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof atualizar>>, {id: number;data: DescontosModel}> = (props) => {
          const {id,data} = props ?? {};

          return  atualizar(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtualizarMutationResult = NonNullable<Awaited<ReturnType<typeof atualizar>>>
    export type AtualizarMutationBody = DescontosModel
    export type AtualizarMutationError = unknown

    /**
 * @summary Update discount
 */
export const useAtualizar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizar>>, TError,{id: number;data: DescontosModel}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof atualizar>>,
        TError,
        {id: number;data: DescontosModel},
        TContext
      > => {

      const mutationOptions = getAtualizarMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Delete discount
 */
export const deletar = (
    id: number,
 ) => {
      
      
      return api<void>(
      {url: `/api/descontos/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeletarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletar>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletar>>, TError,{id: number}, TContext> => {

const mutationKey = ['deletar'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletar>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deletar(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarMutationResult = NonNullable<Awaited<ReturnType<typeof deletar>>>
    
    export type DeletarMutationError = unknown

    /**
 * @summary Delete discount
 */
export const useDeletar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletar>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletar>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeletarMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Deactivate discount
 */
export const inativar = (
    id: number,
 ) => {
      
      
      return api<void>(
      {url: `/api/descontos/${id}/inativar`, method: 'PATCH'
    },
      );
    }
  


export const getInativarMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inativar>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof inativar>>, TError,{id: number}, TContext> => {

const mutationKey = ['inativar'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inativar>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  inativar(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InativarMutationResult = NonNullable<Awaited<ReturnType<typeof inativar>>>
    
    export type InativarMutationError = unknown

    /**
 * @summary Deactivate discount
 */
export const useInativar = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inativar>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof inativar>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getInativarMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Change employee password
 */
export const employeeAuthControllerRegister = (
    employeeChangePasswordDto: EmployeeChangePasswordDto,
 ) => {
      
      
      return api<EmployeeAuthControllerRegister200>(
      {url: `/api/employee/auth/change-password`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: employeeChangePasswordDto
    },
      );
    }
  


export const getEmployeeAuthControllerRegisterMutationOptions = <TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext> => {

const mutationKey = ['employeeAuthControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, {data: EmployeeChangePasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  employeeAuthControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmployeeAuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof employeeAuthControllerRegister>>>
    export type EmployeeAuthControllerRegisterMutationBody = EmployeeChangePasswordDto
    export type EmployeeAuthControllerRegisterMutationError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto

    /**
 * @summary Change employee password
 */
export const useEmployeeAuthControllerRegister = <TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof employeeAuthControllerRegister>>,
        TError,
        {data: EmployeeChangePasswordDto},
        TContext
      > => {

      const mutationOptions = getEmployeeAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary List all users
 */
export const employeeAuthControllerListUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return api<EmployeeAuthControllerListUsers200>(
      {url: `/api/employee/auth/list-users`, method: 'GET', signal
    },
      );
    }
  



export const getEmployeeAuthControllerListUsersQueryKey = () => {
    return [
    `/api/employee/auth/list-users`
    ] as const;
    }

    
export const getEmployeeAuthControllerListUsersQueryOptions = <TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmployeeAuthControllerListUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>> = ({ signal }) => employeeAuthControllerListUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmployeeAuthControllerListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>>
export type EmployeeAuthControllerListUsersQueryError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto


export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>,
          TError,
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>,
          TError,
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all users
 */

export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmployeeAuthControllerListUsersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
