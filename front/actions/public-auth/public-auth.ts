/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * HR Payroll API
 * API para sistema de folha de pagamento
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import { api } from '../../app/lib/axios-orval';
export interface FuncionarioModel {
  id?: number;
  nome: string;
  sobrenome: string;
  /**
   * CPF deve conter 11 dígitos numéricos
   * @pattern \d{11}
   */
  cpf: string;
  rg: string;
  email: string;
  endereco: string;
  dataNascimento?: string;
  pis?: number;
  dataDeAdmissao?: string;
  cargo?: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
   */
  senha: string;
}

export interface CompanyModel {
  id?: number;
  /**
   * CNPJ no formato XX.XXX.XXX/XXXX-XX
   * @pattern \d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}
   */
  cnpj: string;
  razaoSocial: string;
  nomeFantasia?: string;
  inscricaoEstadual?: string;
}

export interface CompanyPatchDTO {
  cnpj?: string;
  razaoSocial?: string;
}

export interface FolhaPagamentoModel {
  id?: number;
  companyId?: number;
  dataInicio?: string;
  dataFim?: string;
  salarioBase?: number;
}

export interface DescontosModel {
  id?: number;
  nome?: string;
  tipo?: string;
  valor?: number;
  ativo?: boolean;
}

export interface PublicRegisterAccountDto {
  nome: string;
  sobrenome: string;
  email: string;
  /** @minLength 8 */
  password: string;
  /** @pattern \d{11} */
  cpf: string;
  rg?: string;
  endereco?: string;
}

export interface PublicLoginAccountDto {
  email: string;
  password: string;
}

export interface PublicForgetPasswordDto {
  email: string;
}

export interface PublicSendVerificationCodeDto {
  email: string;
}

export interface PublicVerifyEmailDto {
  email: string;
  verificationCode: string;
}

export interface PublicAuthControllerRegister201 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerLogin200 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerForgotPassword200 {
  message?: string;
}

export interface PublicAuthControllerSendVerificationCode200 {
  message?: string;
}

export interface PublicAuthControllerVerify200 {
  message?: string;
}

export interface BadRequestGenericResponseDto {
  message?: string;
  error?: string;
}

export interface UnauthorizedGenericResponseDto {
  message?: string;
  error?: string;
}

export interface ForbiddenGenericResponseDto {
  message?: string;
  error?: string;
}

export interface NotFoundGenericResponseDto {
  message?: string;
  error?: string;
}

export interface EmployeeChangePasswordDto {
  /** Token de autenticação */
  token: string;
  /** Nova senha */
  newPassword: string;
  /** Confirmação da nova senha */
  confirmPassword: string;
}

export interface EmployeeAuthControllerRegister200 {
  message?: string;
  success?: boolean;
}

export interface EmployeeAuthControllerListUsers200 {
  users?: UserSummaryDto[];
  totalUsers?: number;
}

export interface UserSummaryDto {
  id?: number;
  nome?: string;
  sobrenome?: string;
  email?: string;
  cargo?: string;
}

/**
 * @summary Register new account
 */
export const publicAuthControllerRegister = (
    publicRegisterAccountDto: PublicRegisterAccountDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerRegister201>(
      {url: `/api/public/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicRegisterAccountDto, signal
    },
      );
    }
  


export const getPublicAuthControllerRegisterMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext> => {

const mutationKey = ['publicAuthControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerRegister>>, {data: PublicRegisterAccountDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerRegister>>>
    export type PublicAuthControllerRegisterMutationBody = PublicRegisterAccountDto
    export type PublicAuthControllerRegisterMutationError = BadRequestGenericResponseDto

    /**
 * @summary Register new account
 */
export const usePublicAuthControllerRegister = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerRegister>>, TError,{data: PublicRegisterAccountDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerRegister>>,
        TError,
        {data: PublicRegisterAccountDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Login to account
 */
export const publicAuthControllerLogin = (
    publicLoginAccountDto: PublicLoginAccountDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerLogin200>(
      {url: `/api/public/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicLoginAccountDto, signal
    },
      );
    }
  


export const getPublicAuthControllerLoginMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext> => {

const mutationKey = ['publicAuthControllerLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerLogin>>, {data: PublicLoginAccountDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerLogin>>>
    export type PublicAuthControllerLoginMutationBody = PublicLoginAccountDto
    export type PublicAuthControllerLoginMutationError = BadRequestGenericResponseDto

    /**
 * @summary Login to account
 */
export const usePublicAuthControllerLogin = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerLogin>>, TError,{data: PublicLoginAccountDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerLogin>>,
        TError,
        {data: PublicLoginAccountDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Request password reset
 */
export const publicAuthControllerForgotPassword = (
    publicForgetPasswordDto: PublicForgetPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerForgotPassword200>(
      {url: `/api/public/auth/forget-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicForgetPasswordDto, signal
    },
      );
    }
  


export const getPublicAuthControllerForgotPasswordMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext> => {

const mutationKey = ['publicAuthControllerForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, {data: PublicForgetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>>
    export type PublicAuthControllerForgotPasswordMutationBody = PublicForgetPasswordDto
    export type PublicAuthControllerForgotPasswordMutationError = BadRequestGenericResponseDto

    /**
 * @summary Request password reset
 */
export const usePublicAuthControllerForgotPassword = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>, TError,{data: PublicForgetPasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerForgotPassword>>,
        TError,
        {data: PublicForgetPasswordDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Send verification code
 */
export const publicAuthControllerSendVerificationCode = (
    publicSendVerificationCodeDto: PublicSendVerificationCodeDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerSendVerificationCode200>(
      {url: `/api/public/auth/send-verification-code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicSendVerificationCodeDto, signal
    },
      );
    }
  


export const getPublicAuthControllerSendVerificationCodeMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext> => {

const mutationKey = ['publicAuthControllerSendVerificationCode'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, {data: PublicSendVerificationCodeDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerSendVerificationCode(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerSendVerificationCodeMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>>
    export type PublicAuthControllerSendVerificationCodeMutationBody = PublicSendVerificationCodeDto
    export type PublicAuthControllerSendVerificationCodeMutationError = BadRequestGenericResponseDto

    /**
 * @summary Send verification code
 */
export const usePublicAuthControllerSendVerificationCode = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>, TError,{data: PublicSendVerificationCodeDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerSendVerificationCode>>,
        TError,
        {data: PublicSendVerificationCodeDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerSendVerificationCodeMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary Verify email
 */
export const publicAuthControllerVerify = (
    publicVerifyEmailDto: PublicVerifyEmailDto,
 signal?: AbortSignal
) => {
      
      
      return api<PublicAuthControllerVerify200>(
      {url: `/api/public/auth/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: publicVerifyEmailDto, signal
    },
      );
    }
  


export const getPublicAuthControllerVerifyMutationOptions = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext> => {

const mutationKey = ['publicAuthControllerVerify'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicAuthControllerVerify>>, {data: PublicVerifyEmailDto}> = (props) => {
          const {data} = props ?? {};

          return  publicAuthControllerVerify(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicAuthControllerVerifyMutationResult = NonNullable<Awaited<ReturnType<typeof publicAuthControllerVerify>>>
    export type PublicAuthControllerVerifyMutationBody = PublicVerifyEmailDto
    export type PublicAuthControllerVerifyMutationError = BadRequestGenericResponseDto

    /**
 * @summary Verify email
 */
export const usePublicAuthControllerVerify = <TError = BadRequestGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicAuthControllerVerify>>, TError,{data: PublicVerifyEmailDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicAuthControllerVerify>>,
        TError,
        {data: PublicVerifyEmailDto},
        TContext
      > => {

      const mutationOptions = getPublicAuthControllerVerifyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
