/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * HR Payroll API
 * API para sistema de folha de pagamento
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { api } from '../../app/lib/axios-orval';
export interface FuncionarioModel {
  id?: number;
  nome: string;
  sobrenome: string;
  /**
   * CPF deve conter 11 dígitos numéricos
   * @pattern \d{11}
   */
  cpf: string;
  rg: string;
  email: string;
  endereco: string;
  dataNascimento?: string;
  pis?: number;
  dataDeAdmissao?: string;
  cargo?: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
   */
  senha: string;
}

export interface CompanyModel {
  id?: number;
  /**
   * CNPJ no formato XX.XXX.XXX/XXXX-XX
   * @pattern \d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}
   */
  cnpj: string;
  razaoSocial: string;
  nomeFantasia?: string;
  inscricaoEstadual?: string;
}

export interface CompanyPatchDTO {
  cnpj?: string;
  razaoSocial?: string;
}

export interface FolhaPagamentoModel {
  id?: number;
  companyId?: number;
  dataInicio?: string;
  dataFim?: string;
  salarioBase?: number;
}

export interface DescontosModel {
  id?: number;
  nome?: string;
  tipo?: string;
  valor?: number;
  ativo?: boolean;
}

export interface PublicRegisterAccountDto {
  nome: string;
  sobrenome: string;
  email: string;
  /** @minLength 8 */
  password: string;
  /** @pattern \d{11} */
  cpf: string;
  rg?: string;
  endereco?: string;
}

export interface PublicLoginAccountDto {
  email: string;
  password: string;
}

export interface PublicForgetPasswordDto {
  email: string;
}

export interface PublicSendVerificationCodeDto {
  email: string;
}

export interface PublicVerifyEmailDto {
  email: string;
  verificationCode: string;
}

export interface PublicAuthControllerRegister201 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerLogin200 {
  token?: string;
  email?: string;
  nome?: string;
  id?: number;
}

export interface PublicAuthControllerForgotPassword200 {
  message?: string;
}

export interface PublicAuthControllerSendVerificationCode200 {
  message?: string;
}

export interface PublicAuthControllerVerify200 {
  message?: string;
}

export interface BadRequestGenericResponseDto {
  message?: string;
  error?: string;
}

export interface UnauthorizedGenericResponseDto {
  message?: string;
  error?: string;
}

export interface ForbiddenGenericResponseDto {
  message?: string;
  error?: string;
}

export interface NotFoundGenericResponseDto {
  message?: string;
  error?: string;
}

export interface EmployeeChangePasswordDto {
  /** Token de autenticação */
  token: string;
  /** Nova senha */
  newPassword: string;
  /** Confirmação da nova senha */
  confirmPassword: string;
}

export interface EmployeeAuthControllerRegister200 {
  message?: string;
  success?: boolean;
}

export interface EmployeeAuthControllerListUsers200 {
  users?: UserSummaryDto[];
  totalUsers?: number;
}

export interface UserSummaryDto {
  id?: number;
  nome?: string;
  sobrenome?: string;
  email?: string;
  cargo?: string;
}

/**
 * @summary Change employee password
 */
export const employeeAuthControllerRegister = (
    employeeChangePasswordDto: EmployeeChangePasswordDto,
 ) => {
      
      
      return api<EmployeeAuthControllerRegister200>(
      {url: `/api/employee/auth/change-password`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: employeeChangePasswordDto
    },
      );
    }
  


export const getEmployeeAuthControllerRegisterMutationOptions = <TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext> => {

const mutationKey = ['employeeAuthControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, {data: EmployeeChangePasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  employeeAuthControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmployeeAuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof employeeAuthControllerRegister>>>
    export type EmployeeAuthControllerRegisterMutationBody = EmployeeChangePasswordDto
    export type EmployeeAuthControllerRegisterMutationError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto

    /**
 * @summary Change employee password
 */
export const useEmployeeAuthControllerRegister = <TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeAuthControllerRegister>>, TError,{data: EmployeeChangePasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof employeeAuthControllerRegister>>,
        TError,
        {data: EmployeeChangePasswordDto},
        TContext
      > => {

      const mutationOptions = getEmployeeAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    
/**
 * @summary List all users
 */
export const employeeAuthControllerListUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return api<EmployeeAuthControllerListUsers200>(
      {url: `/api/employee/auth/list-users`, method: 'GET', signal
    },
      );
    }
  



export const getEmployeeAuthControllerListUsersQueryKey = () => {
    return [
    `/api/employee/auth/list-users`
    ] as const;
    }

    
export const getEmployeeAuthControllerListUsersQueryOptions = <TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmployeeAuthControllerListUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>> = ({ signal }) => employeeAuthControllerListUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmployeeAuthControllerListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>>
export type EmployeeAuthControllerListUsersQueryError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto


export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>,
          TError,
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>,
          TError,
          Awaited<ReturnType<typeof employeeAuthControllerListUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all users
 */

export function useEmployeeAuthControllerListUsers<TData = Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError = BadRequestGenericResponseDto | UnauthorizedGenericResponseDto | ForbiddenGenericResponseDto | NotFoundGenericResponseDto>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeAuthControllerListUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmployeeAuthControllerListUsersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
