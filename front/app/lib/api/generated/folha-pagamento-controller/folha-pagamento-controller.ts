/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * HR Payroll API
 * API para c√°lculo de folha de pagamento
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  FolhaPagamentoModel,
  GerarNovaFolhaParams,
} from "../hRPayrollAPI.schemas";

import { customInstance } from "../../../axios";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const gerarNovaFolha = (
  companyId: number,
  params: GerarNovaFolhaParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FolhaPagamentoModel>(
    { url: `/folhas/gerar/${companyId}`, method: "POST", params, signal },
    options,
  );
};

export const getGerarNovaFolhaMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof gerarNovaFolha>>,
    TError,
    { companyId: number; params: GerarNovaFolhaParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof gerarNovaFolha>>,
  TError,
  { companyId: number; params: GerarNovaFolhaParams },
  TContext
> => {
  const mutationKey = ["gerarNovaFolha"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof gerarNovaFolha>>,
    { companyId: number; params: GerarNovaFolhaParams }
  > = (props) => {
    const { companyId, params } = props ?? {};

    return gerarNovaFolha(companyId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GerarNovaFolhaMutationResult = NonNullable<
  Awaited<ReturnType<typeof gerarNovaFolha>>
>;

export type GerarNovaFolhaMutationError = unknown;

export const useGerarNovaFolha = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof gerarNovaFolha>>,
      TError,
      { companyId: number; params: GerarNovaFolhaParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof gerarNovaFolha>>,
  TError,
  { companyId: number; params: GerarNovaFolhaParams },
  TContext
> => {
  const mutationOptions = getGerarNovaFolhaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const criar = (
  folhaPagamentoModel: FolhaPagamentoModel,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    {
      url: `/folhas/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: folhaPagamentoModel,
      signal,
    },
    options,
  );
};

export const getCriarMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof criar>>,
    TError,
    { data: FolhaPagamentoModel },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof criar>>,
  TError,
  { data: FolhaPagamentoModel },
  TContext
> => {
  const mutationKey = ["criar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof criar>>,
    { data: FolhaPagamentoModel }
  > = (props) => {
    const { data } = props ?? {};

    return criar(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CriarMutationResult = NonNullable<
  Awaited<ReturnType<typeof criar>>
>;
export type CriarMutationBody = FolhaPagamentoModel;
export type CriarMutationError = unknown;

export const useCriar = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof criar>>,
      TError,
      { data: FolhaPagamentoModel },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof criar>>,
  TError,
  { data: FolhaPagamentoModel },
  TContext
> => {
  const mutationOptions = getCriarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const listarTodas = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FolhaPagamentoModel[]>(
    { url: `/folhas`, method: "GET", signal },
    options,
  );
};

export const getListarTodasQueryKey = () => {
  return [`/folhas`] as const;
};

export const getListarTodasQueryOptions = <
  TData = Awaited<ReturnType<typeof listarTodas>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListarTodasQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarTodas>>> = ({
    signal,
  }) => listarTodas(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarTodas>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListarTodasQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarTodas>>
>;
export type ListarTodasQueryError = unknown;

export function useListarTodas<
  TData = Awaited<ReturnType<typeof listarTodas>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodas>>,
          TError,
          Awaited<ReturnType<typeof listarTodas>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarTodas<
  TData = Awaited<ReturnType<typeof listarTodas>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodas>>,
          TError,
          Awaited<ReturnType<typeof listarTodas>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarTodas<
  TData = Awaited<ReturnType<typeof listarTodas>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListarTodas<
  TData = Awaited<ReturnType<typeof listarTodas>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodas>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListarTodasQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const buscarPorId = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    { url: `/folhas/${id}`, method: "GET", signal },
    options,
  );
};

export const getBuscarPorIdQueryKey = (id?: number) => {
  return [`/folhas/${id}`] as const;
};

export const getBuscarPorIdQueryOptions = <
  TData = Awaited<ReturnType<typeof buscarPorId>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBuscarPorIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarPorId>>> = ({
    signal,
  }) => buscarPorId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof buscarPorId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BuscarPorIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof buscarPorId>>
>;
export type BuscarPorIdQueryError = unknown;

export function useBuscarPorId<
  TData = Awaited<ReturnType<typeof buscarPorId>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorId<
  TData = Awaited<ReturnType<typeof buscarPorId>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorId<
  TData = Awaited<ReturnType<typeof buscarPorId>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBuscarPorId<
  TData = Awaited<ReturnType<typeof buscarPorId>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBuscarPorIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const buscarPorEmpresa = (
  companyId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    { url: `/folhas/empresa/${companyId}`, method: "GET", signal },
    options,
  );
};

export const getBuscarPorEmpresaQueryKey = (companyId?: number) => {
  return [`/folhas/empresa/${companyId}`] as const;
};

export const getBuscarPorEmpresaQueryOptions = <
  TData = Awaited<ReturnType<typeof buscarPorEmpresa>>,
  TError = unknown,
>(
  companyId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof buscarPorEmpresa>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBuscarPorEmpresaQueryKey(companyId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof buscarPorEmpresa>>
  > = ({ signal }) => buscarPorEmpresa(companyId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!companyId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof buscarPorEmpresa>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BuscarPorEmpresaQueryResult = NonNullable<
  Awaited<ReturnType<typeof buscarPorEmpresa>>
>;
export type BuscarPorEmpresaQueryError = unknown;

export function useBuscarPorEmpresa<
  TData = Awaited<ReturnType<typeof buscarPorEmpresa>>,
  TError = unknown,
>(
  companyId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof buscarPorEmpresa>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorEmpresa>>,
          TError,
          Awaited<ReturnType<typeof buscarPorEmpresa>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorEmpresa<
  TData = Awaited<ReturnType<typeof buscarPorEmpresa>>,
  TError = unknown,
>(
  companyId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof buscarPorEmpresa>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorEmpresa>>,
          TError,
          Awaited<ReturnType<typeof buscarPorEmpresa>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorEmpresa<
  TData = Awaited<ReturnType<typeof buscarPorEmpresa>>,
  TError = unknown,
>(
  companyId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof buscarPorEmpresa>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBuscarPorEmpresa<
  TData = Awaited<ReturnType<typeof buscarPorEmpresa>>,
  TError = unknown,
>(
  companyId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof buscarPorEmpresa>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBuscarPorEmpresaQueryOptions(companyId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
