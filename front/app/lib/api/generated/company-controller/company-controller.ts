/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * HR Payroll API
 * API para c√°lculo de folha de pagamento
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CompanyModel, CompanyPatchDTO } from "../hRPayrollAPI.schemas";

import { customInstance } from "../../../axios";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const createCompany = (
  companyModel: CompanyModel,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    {
      url: `/companies/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: companyModel,
      signal,
    },
    options,
  );
};

export const getCreateCompanyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCompany>>,
    TError,
    { data: CompanyModel },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCompany>>,
  TError,
  { data: CompanyModel },
  TContext
> => {
  const mutationKey = ["createCompany"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCompany>>,
    { data: CompanyModel }
  > = (props) => {
    const { data } = props ?? {};

    return createCompany(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCompanyMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCompany>>
>;
export type CreateCompanyMutationBody = CompanyModel;
export type CreateCompanyMutationError = unknown;

export const useCreateCompany = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCompany>>,
      TError,
      { data: CompanyModel },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCompany>>,
  TError,
  { data: CompanyModel },
  TContext
> => {
  const mutationOptions = getCreateCompanyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const patchCompany = (
  id: number,
  companyPatchDTO: CompanyPatchDTO,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/companies/update/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: companyPatchDTO,
    },
    options,
  );
};

export const getPatchCompanyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchCompany>>,
    TError,
    { id: number; data: CompanyPatchDTO },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchCompany>>,
  TError,
  { id: number; data: CompanyPatchDTO },
  TContext
> => {
  const mutationKey = ["patchCompany"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchCompany>>,
    { id: number; data: CompanyPatchDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchCompany(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchCompanyMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchCompany>>
>;
export type PatchCompanyMutationBody = CompanyPatchDTO;
export type PatchCompanyMutationError = unknown;

export const usePatchCompany = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchCompany>>,
      TError,
      { id: number; data: CompanyPatchDTO },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchCompany>>,
  TError,
  { id: number; data: CompanyPatchDTO },
  TContext
> => {
  const mutationOptions = getPatchCompanyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getCompany = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    { url: `/companies/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetCompanyQueryKey = (id?: number) => {
  return [`/companies/${id}`] as const;
};

export const getGetCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompany>>> = ({
    signal,
  }) => getCompany(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCompany>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompany>>
>;
export type GetCompanyQueryError = unknown;

export function useGetCompany<
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompany>>,
          TError,
          Awaited<ReturnType<typeof getCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompany<
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCompany>>,
          TError,
          Awaited<ReturnType<typeof getCompany>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCompany<
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCompany<
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCompanyQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const listCompanies = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    { url: `/companies/list`, method: "GET", signal },
    options,
  );
};

export const getListCompaniesQueryKey = () => {
  return [`/companies/list`] as const;
};

export const getListCompaniesQueryOptions = <
  TData = Awaited<ReturnType<typeof listCompanies>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListCompaniesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCompanies>>> = ({
    signal,
  }) => listCompanies(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listCompanies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCompaniesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listCompanies>>
>;
export type ListCompaniesQueryError = unknown;

export function useListCompanies<
  TData = Awaited<ReturnType<typeof listCompanies>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompanies>>,
          TError,
          Awaited<ReturnType<typeof listCompanies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanies<
  TData = Awaited<ReturnType<typeof listCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCompanies>>,
          TError,
          Awaited<ReturnType<typeof listCompanies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCompanies<
  TData = Awaited<ReturnType<typeof listCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListCompanies<
  TData = Awaited<ReturnType<typeof listCompanies>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCompanies>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListCompaniesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
