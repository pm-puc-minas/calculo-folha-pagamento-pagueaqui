/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * HR Payroll API
 * API para c√°lculo de folha de pagamento
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { DescontosModel } from "../hRPayrollAPI.schemas";

import { customInstance } from "../../../axios";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const buscarPorId1 = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DescontosModel>(
    { url: `/api/descontos/${id}`, method: "GET", signal },
    options,
  );
};

export const getBuscarPorId1QueryKey = (id?: number) => {
  return [`/api/descontos/${id}`] as const;
};

export const getBuscarPorId1QueryOptions = <
  TData = Awaited<ReturnType<typeof buscarPorId1>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId1>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBuscarPorId1QueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarPorId1>>> = ({
    signal,
  }) => buscarPorId1(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof buscarPorId1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BuscarPorId1QueryResult = NonNullable<
  Awaited<ReturnType<typeof buscarPorId1>>
>;
export type BuscarPorId1QueryError = unknown;

export function useBuscarPorId1<
  TData = Awaited<ReturnType<typeof buscarPorId1>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId1>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId1>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorId1<
  TData = Awaited<ReturnType<typeof buscarPorId1>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId1>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarPorId1>>,
          TError,
          Awaited<ReturnType<typeof buscarPorId1>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBuscarPorId1<
  TData = Awaited<ReturnType<typeof buscarPorId1>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId1>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBuscarPorId1<
  TData = Awaited<ReturnType<typeof buscarPorId1>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof buscarPorId1>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBuscarPorId1QueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const atualizar = (
  id: number,
  descontosModel: DescontosModel,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DescontosModel>(
    {
      url: `/api/descontos/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: descontosModel,
    },
    options,
  );
};

export const getAtualizarMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof atualizar>>,
    TError,
    { id: number; data: DescontosModel },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof atualizar>>,
  TError,
  { id: number; data: DescontosModel },
  TContext
> => {
  const mutationKey = ["atualizar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof atualizar>>,
    { id: number; data: DescontosModel }
  > = (props) => {
    const { id, data } = props ?? {};

    return atualizar(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AtualizarMutationResult = NonNullable<
  Awaited<ReturnType<typeof atualizar>>
>;
export type AtualizarMutationBody = DescontosModel;
export type AtualizarMutationError = unknown;

export const useAtualizar = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof atualizar>>,
      TError,
      { id: number; data: DescontosModel },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof atualizar>>,
  TError,
  { id: number; data: DescontosModel },
  TContext
> => {
  const mutationOptions = getAtualizarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deletar = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/descontos/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeletarMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletar>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletar>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deletar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletar>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletar(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletarMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletar>>
>;

export type DeletarMutationError = unknown;

export const useDeletar = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletar>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletar>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeletarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const listarTodos = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DescontosModel[]>(
    { url: `/api/descontos`, method: "GET", signal },
    options,
  );
};

export const getListarTodosQueryKey = () => {
  return [`/api/descontos`] as const;
};

export const getListarTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof listarTodos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListarTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarTodos>>> = ({
    signal,
  }) => listarTodos(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListarTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarTodos>>
>;
export type ListarTodosQueryError = unknown;

export function useListarTodos<
  TData = Awaited<ReturnType<typeof listarTodos>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodos>>,
          TError,
          Awaited<ReturnType<typeof listarTodos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarTodos<
  TData = Awaited<ReturnType<typeof listarTodos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarTodos>>,
          TError,
          Awaited<ReturnType<typeof listarTodos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarTodos<
  TData = Awaited<ReturnType<typeof listarTodos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListarTodos<
  TData = Awaited<ReturnType<typeof listarTodos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarTodos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListarTodosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const criar1 = (
  descontosModel: DescontosModel,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DescontosModel>(
    {
      url: `/api/descontos`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: descontosModel,
      signal,
    },
    options,
  );
};

export const getCriar1MutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof criar1>>,
    TError,
    { data: DescontosModel },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof criar1>>,
  TError,
  { data: DescontosModel },
  TContext
> => {
  const mutationKey = ["criar1"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof criar1>>,
    { data: DescontosModel }
  > = (props) => {
    const { data } = props ?? {};

    return criar1(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type Criar1MutationResult = NonNullable<
  Awaited<ReturnType<typeof criar1>>
>;
export type Criar1MutationBody = DescontosModel;
export type Criar1MutationError = unknown;

export const useCriar1 = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof criar1>>,
      TError,
      { data: DescontosModel },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof criar1>>,
  TError,
  { data: DescontosModel },
  TContext
> => {
  const mutationOptions = getCriar1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const inativar = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/descontos/${id}/inativar`, method: "PATCH" },
    options,
  );
};

export const getInativarMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inativar>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof inativar>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["inativar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inativar>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return inativar(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InativarMutationResult = NonNullable<
  Awaited<ReturnType<typeof inativar>>
>;

export type InativarMutationError = unknown;

export const useInativar = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inativar>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof inativar>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getInativarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const listarAtivos = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DescontosModel[]>(
    { url: `/api/descontos/ativos`, method: "GET", signal },
    options,
  );
};

export const getListarAtivosQueryKey = () => {
  return [`/api/descontos/ativos`] as const;
};

export const getListarAtivosQueryOptions = <
  TData = Awaited<ReturnType<typeof listarAtivos>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListarAtivosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listarAtivos>>> = ({
    signal,
  }) => listarAtivos(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listarAtivos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListarAtivosQueryResult = NonNullable<
  Awaited<ReturnType<typeof listarAtivos>>
>;
export type ListarAtivosQueryError = unknown;

export function useListarAtivos<
  TData = Awaited<ReturnType<typeof listarAtivos>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarAtivos>>,
          TError,
          Awaited<ReturnType<typeof listarAtivos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarAtivos<
  TData = Awaited<ReturnType<typeof listarAtivos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarAtivos>>,
          TError,
          Awaited<ReturnType<typeof listarAtivos>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListarAtivos<
  TData = Awaited<ReturnType<typeof listarAtivos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListarAtivos<
  TData = Awaited<ReturnType<typeof listarAtivos>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listarAtivos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListarAtivosQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
